/*
 * generated by Xtext
 */
package ru.nsu.xtext.scoping

import java.util.ArrayList
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import ru.nsu.xtext.dbDsl.Column
import ru.nsu.xtext.dbDsl.ForeignKeyDecl
import ru.nsu.xtext.dbDsl.Table

import static extension org.eclipse.xtext.EcoreUtil2.*
import static extension ru.nsu.xtext.util.DbModelUtil.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 */
class DbDslScopeProvider extends AbstractDeclarativeScopeProvider {

//// comment out the class body if the default scope provider should
//// be used
//	def scope_ForeignKeyDecl_referredcol(ForeignKeyDecl context, EReference r) {
//		val columnsOfThisTable = context.getContainerOfType(typeof(Table)).columns
//		Scopes::scopeFor(columnsOfThisTable, getScopeForGloballyUniqueColumns(context))
//// uncomment the next line to see (non-)interference with import-statement
////		Scopes::scopeFor(columnsOfThisTable, getScopeOfFullyQualifiedColumns(context))
//		
//		// obsolete version: put all visible elements into one region
////		val allColumns = context.root.eAllContents.toIterable.filter(typeof(Column))
////		val uniqueNameColumns = allColumns.deleteColumnsWithMultipleOccurrenceByName
////		val columnsOfThisTable = context.getContainerOfType(typeof(Table)).columns
////		val scopedColumns = uniqueNameColumns.addColumnsIfNameDoesNotOccurYet(columnsOfThisTable)
////		Scopes::scopeFor(scopedColumns, getScopeOfFullyQualifiedColumns(context))
//	}
//
//	def getScopeForGloballyUniqueColumns(ForeignKeyDecl context) {
//		val allColumns = context.root.eAllContents.toIterable.filter(typeof(Column))
//		val uniqueNameColumns = allColumns.deleteColumnsWithMultipleOccurrenceByName
//		Scopes::scopeFor(uniqueNameColumns, getScopeOfFullyQualifiedColumns(context))
//	}
//	
//		// returns the most outer scope, where we allow all qualified names
//	// for columns
//	def getScopeOfFullyQualifiedColumns(ForeignKeyDecl context) {
//		val scopedColumns = context.root.eAllContents.toIterable.filter(typeof(Column))
//		Scopes::scopeFor(scopedColumns, [qualifiedName], IScope.NULLSCOPE)
//	}
//	
//
//	def deleteColumnsWithMultipleOccurrenceByName(Iterable<Column> in) {
//		val result = new ArrayList<Column>()
//		in.forEach [ c |
//			val dblCol = result.iterator.findFirst[name == c.name]
//			if (dblCol == null) {
//				result.add(c)
//			} else {
//				result.remove(dblCol)
//			}
//		]
//		result
//	}



}
